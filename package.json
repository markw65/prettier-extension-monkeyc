{
  "type": "commonjs",
  "publisher": "markw65",
  "name": "prettier-extension-monkeyc",
  "displayName": "Prettier Monkey C",
  "description": "A Monkey C source transformation extension",
  "icon": "icons/PMC.png",
  "version": "2.0.80",
  "engines": {
    "vscode": "^1.65.0"
  },
  "dependencies": {
    "@markw65/monkeyc-optimizer": "^1.1.51",
    "@markw65/prettier-plugin-monkeyc": "^1.0.54"
  },
  "categories": [
    "Programming Languages",
    "Formatters",
    "Linters",
    "Debuggers"
  ],
  "keywords": [
    "optimizer"
  ],
  "activationEvents": [
    "onDebug",
    "onDebugDynamicConfigurations:omonkeyc",
    "onLanguage:monkeyc",
    "onLanguage:mss",
    "onLanguage:jungle",
    "onLanguage:manifest",
    "onCommand:workbench.action.tasks.runTask",
    "onCommand:prettiermonkeyc.getTargetDevice",
    "onCommand:vscode.executeDocumentSymbolProvider"
  ],
  "main": "./build/extension.js",
  "contributes": {
    "commands": [
      {
        "title": "Generate Optimized Project",
        "command": "prettiermonkeyc.generateOptimizedProject",
        "category": "Prettier Monkey C"
      },
      {
        "title": "Build Optimized Project",
        "command": "prettiermonkeyc.buildOptimizedProject",
        "category": "Prettier Monkey C"
      },
      {
        "title": "Build and Run Optimized Project",
        "command": "prettiermonkeyc.runOptimizedProject",
        "category": "Prettier Monkey C"
      },
      {
        "title": "Export Optimized Project",
        "command": "prettiermonkeyc.exportOptimizedProject",
        "category": "Prettier Monkey C"
      },
      {
        "title": "Clean Optimized Build",
        "command": "prettiermonkeyc.cleanOptimizedBuild",
        "category": "Prettier Monkey C"
      }
    ],
    "configuration": [
      {
        "title": "Optimizer",
        "type": "object",
        "properties": {
          "prettierMonkeyC.outputPath": {
            "type": "string",
            "description": "Path to where the optimized project should be generated.",
            "default": "bin/optimized",
            "scope": "resource"
          },
          "prettierMonkeyC.extraExcludes": {
            "type": "string",
            "markdownDescription": "[Semicolon separated list of excludeAnnotations to add or remove](https://github.com/markw65/monkeyc-optimizer/wiki/The-extraExcludes-Option)",
            "default": "",
            "scope": "resource"
          },
          "prettierMonkeyC.ignoredExcludeAnnotations": {
            "type": "string",
            "description": "Semicolon separated list of excludeAnnotations to ignore, or `*' to ignore all",
            "default": "",
            "scope": "resource"
          },
          "prettierMonkeyC.ignoredAnnotations": {
            "type": "string",
            "description": "Semicolon separated list of annotations to ignore, or `*' to ignore all",
            "default": "",
            "scope": "resource"
          },
          "prettierMonkeyC.ignoredSourcePaths": {
            "type": "string",
            "description": "Regex of source paths to ignore.",
            "default": "",
            "scope": "resource"
          },
          "prettierMonkeyC.typeCheckLevel": {
            "type": "string",
            "description": "Unless set to 'Default', overrides the corresponding `monkeyC' setting.",
            "default": "Off",
            "enum": [
              "Off",
              "Default",
              "Gradual",
              "Informative",
              "Strict"
            ],
            "enumDescriptions": [
              "Disable type checking",
              "Inherit the Garmin Extension's typeCheckLevel",
              "Type match failures are marked as errors, but ambiguity is ignored",
              "Type match failures are marked as errors, and ambiguity is marked as a warning",
              "Type match failures and ambiguity are marked as errors"
            ]
          },
          "prettierMonkeyC.checkInvalidSymbols": {
            "type": "string",
            "description": "Whether to check for invalid symbols, and how to report them",
            "enum": [
              "OFF",
              "INFO",
              "WARNING",
              "ERROR"
            ],
            "enumDescriptions": [
              "Disable checking",
              "Generate INFO level diagnostics",
              "Generate WARNING level diagnostics",
              "Generate ERROR level diagnostics"
            ],
            "default": "WARNING",
            "scope": "resource"
          },
          "prettierMonkeyC.checkTypes": {
            "type": "string",
            "description": "Whether to check for type related issues, and how to report them",
            "enum": [
              "OFF",
              "INFO",
              "WARNING",
              "ERROR"
            ],
            "enumDescriptions": [
              "Disable checking",
              "Generate INFO level diagnostics",
              "Generate WARNING level diagnostics",
              "Generate ERROR level diagnostics"
            ],
            "default": "WARNING",
            "scope": "resource"
          },
          "prettierMonkeyC.trustDeclaredTypes": {
            "order": 10,
            "type": "boolean",
            "markdownDescription": "[Whether to rely on type declarations when optimizing](https://github.com/markw65/monkeyc-optimizer/wiki/Type-and-Dataflow-analysis#trust-declared-types)",
            "default": true,
            "scope": "resource"
          },
          "prettierMonkeyC.propagateTypes": {
            "order": 11,
            "type": "boolean",
            "markdownDescription": "[Whether to propagate type information, or process it locally](https://github.com/markw65/monkeyc-optimizer/wiki/Type-and-Dataflow-analysis#propagate-types)",
            "default": true,
            "scope": "resource"
          },
          "prettierMonkeyC.sizeBasedPRE": {
            "order": 11,
            "type": "boolean",
            "markdownDescription": "[Whether to enable the size based partial redundancy pass](https://github.com/markw65/monkeyc-optimizer/wiki/Type-and-Dataflow-analysis#size-based-pre)",
            "default": true,
            "scope": "resource"
          },
          "prettierMonkeyC.minimizeLocals": {
            "order": 12,
            "type": "boolean",
            "markdownDescription": "[Whether to enable the minimize locals pass](https://github.com/markw65/monkeyc-optimizer/wiki/Local-variable-elimination#minimize-locals)",
            "default": true,
            "scope": "resource"
          },
          "prettierMonkeyC.singleUseCopyProp": {
            "order": 12,
            "type": "boolean",
            "markdownDescription": "[Whether to enable the single use copy propagation pass](https://github.com/markw65/monkeyc-optimizer/wiki/Local-variable-elimination#single-use-copy-propagation)",
            "default": true,
            "scope": "resource"
          },
          "prettierMonkeyC.minimizeModules": {
            "order": 12,
            "type": "boolean",
            "markdownDescription": "[Whether to enable the minimize modules pass](https://github.com/markw65/monkeyc-optimizer/wiki/Optimizing-module-imports#minimize-modules)",
            "default": true,
            "scope": "resource"
          },
          "prettierMonkeyC.iterateOptimizer": {
            "order": 12,
            "type": "boolean",
            "description": "Whether to keep running the optimizer pass until it makes no further changes (may be slow)",
            "default": false,
            "scope": "resource"
          },
          "prettierMonkeyC.enforceStatic": {
            "type": "string",
            "description": "Whether to perform lookups in static methods as if they were invoked statically",
            "enum": [
              "NO",
              "YES"
            ],
            "enumDescriptions": [
              "Assume static functions may be invoked non-statically",
              "Assume static functions will always be invoked statically"
            ],
            "default": "YES"
          },
          "prettierMonkeyC.compilerLookupRules": {
            "type": "string",
            "description": "Whether to perform lookups as compiler1, compiler2, or based on the currently selected sdk",
            "enum": [
              "COMPILER1",
              "COMPILER2",
              "DEFAULT"
            ],
            "enumDescriptions": [
              "Match compiler1's behavior when performing lookups",
              "Match compiler2's behavior when performing lookups",
              "Match the currently selected compiler's behavior"
            ],
            "default": "DEFAULT"
          },
          "prettierMonkeyC.checkCompilerLookupRules": {
            "type": "string",
            "description": "Whether to report differences in your code's behavior between compiler1 and compiler2",
            "enum": [
              "OFF",
              "INFO",
              "WARNING",
              "ERROR"
            ],
            "enumDescriptions": [
              "Disable checking",
              "Generate INFO level diagnostics",
              "Generate WARNING level diagnostics",
              "Generate ERROR level diagnostics"
            ],
            "default": "WARNING"
          },
          "prettierMonkeyC.useLocalOptimizer": {
            "type": "boolean",
            "description": "Whether to use a locally installed @markw65/monkeyc-optimizer for builds",
            "default": true,
            "scope": "resource"
          }
        }
      },
      {
        "title": "Post Build Optimizer",
        "type": "object",
        "properties": {
          "prettierMonkeyC.postBuildOptimizer": {
            "title": "Enable",
            "order": 0,
            "type": "boolean",
            "description": "Whether to enable the post build optimizer",
            "default": false,
            "scope": "resource"
          },
          "prettierMonkeyC.removeArgc": {
            "order": 1,
            "type": "boolean",
            "markdownDescription": "[Whether to remove argc bytecodes](https://github.com/markw65/monkeyc-optimizer/wiki/Post-Build-Optimizer#remove-argc)",
            "default": false,
            "scope": "resource"
          },
          "prettierMonkeyC.postBuildPRE": {
            "order": 1,
            "type": "boolean",
            "markdownDescription": "Post Build Size based PRE [similar to the source-to-source pass](https://github.com/markw65/monkeyc-optimizer/wiki/Type-and-Dataflow-analysis#size-based-pre)",
            "default": true,
            "scope": "resource"
          }
        }
      },
      {
        "title": "Prettier Monkey C",
        "type": "object",
        "properties": {
          "prettierMonkeyC.disableAnalysis": {
            "order": 0,
            "type": "boolean",
            "markdownDescription": "When set disables all background analysis. Only set this if you're seeing performance issues in the editor.",
            "default": false,
            "scope": "resource"
          },
          "prettierMonkeyC.documentLinks": {
            "order": 1,
            "type": "boolean",
            "markdownDescription": "Whether to add https links for Toybox entries in .mc files. Only applies when `#prettierMonkeyC.disableAnalysis#` is not set",
            "default": true,
            "scope": "resource"
          },
          "prettierMonkeyC.findSingleDefinition": {
            "order": 2,
            "type": "boolean",
            "markdownDescription": "Whether Goto Definition on one of several definitions for a symbol should find all of them, or just the selected symbol. Only applies when `#prettierMonkeyC.disableAnalysis#` is not set",
            "default": false,
            "scope": "resource"
          },
          "prettierMonkeyC.disableLiveAnalysis": {
            "order": 3,
            "type": "boolean",
            "markdownDescription": "Whether to disable the live analysis, which shows errors and warnings in real time as you type. Only applies when `#prettierMonkeyC.disableAnalysis#` is not set",
            "default": false,
            "scope": "resource"
          },
          "prettierMonkeyC.disableHover": {
            "order": 4,
            "type": "boolean",
            "markdownDescription": "Whether to disable the hover provider, which shows information about the symbol the mouse is over. Only applies when `#prettierMonkeyC.disableAnalysis#` is not set",
            "default": false,
            "scope": "resource"
          },
          "prettierMonkeyC.disableCompletion": {
            "order": 5,
            "type": "boolean",
            "markdownDescription": "Whether to disable the completion provider, which provides context-sensitive completion suggestions as you type. Only applies when `#prettierMonkeyC.disableAnalysis#` is not set",
            "default": false,
            "scope": "resource"
          },
          "prettierMonkeyC.disableSignatures": {
            "order": 6,
            "type": "boolean",
            "markdownDescription": "Whether to disable the signature provider, which provides information about the arguments to a call as you type. Only applies when `#prettierMonkeyC.disableAnalysis#` is not set",
            "default": false,
            "scope": "resource"
          }
        }
      }
    ],
    "taskDefinitions": [
      {
        "type": "omonkeyc",
        "required": [
          "device"
        ],
        "properties": {
          "device": {
            "type": "string",
            "description": "The device to build for. The special value `export' will do an iq build into bin/export, and the value `choose' will let you pick the device from a list"
          },
          "simulatorBuild": {
            "type": "boolean",
            "description": "Is this build for the simulator."
          },
          "releaseBuild": {
            "type": "boolean",
            "description": "Is this a release build."
          },
          "testBuild": {
            "type": "boolean",
            "description": "Is this a test build."
          },
          "jungleFiles": {
            "type": "string",
            "description": "If present, overrides the corresponding `monkeyC' setting."
          },
          "developerKeyPath": {
            "type": "string",
            "description": "If present, overrides the corresponding `monkeyC' setting."
          },
          "typeCheckLevel": {
            "type": "string",
            "description": "If present, overrides the corresponding `monkeyC' setting.",
            "enum": [
              "Off",
              "Gradual",
              "Informative",
              "Strict"
            ],
            "enumDescriptions": [
              "Disable type checking",
              "Type match failures are marked as errors, but ambiguity is ignored",
              "Type match failures are marked as errors, and ambiguity is marked as a warning",
              "Type match failures and ambiguity are marked as errors"
            ]
          },
          "optimizationLevel": {
            "type": "string",
            "description": "If present, overrides the corresponding `monkeyC' setting.",
            "enum": [
              "None",
              "Basic",
              "Fast",
              "Slow"
            ],
            "enumDescriptions": [
              "No optimization",
              "Basic optimizations for building in debug",
              "Fast optimizations for building in release",
              "Slow optimizations that need more time"
            ]
          },
          "checkInvalidSymbols": {
            "type": "string",
            "description": "Whether to check for invalid symbols, and how to report them",
            "enum": [
              "OFF",
              "INFO",
              "WARNING",
              "ERROR"
            ],
            "enumDescriptions": [
              "Disable checking",
              "Generate INFO level diagnostics",
              "Generate WARNING level diagnostics",
              "Generate ERROR level diagnostics"
            ],
            "default": "WARNING"
          },
          "checkTypes": {
            "type": "string",
            "description": "Whether to check for type related issues, and how to report them",
            "enum": [
              "OFF",
              "INFO",
              "WARNING",
              "ERROR"
            ],
            "enumDescriptions": [
              "Disable checking",
              "Generate INFO level diagnostics",
              "Generate WARNING level diagnostics",
              "Generate ERROR level diagnostics"
            ],
            "default": "WARNING"
          },
          "compilerOptions": {
            "type": "string",
            "description": "If present, overrides the corresponding `monkeyC' setting."
          },
          "compilerWarnings": {
            "type": "boolean",
            "description": "If present, overrides the corresponding `monkeyC' setting."
          },
          "outputPath": {
            "type": "string",
            "description": "If present, overrides the corresponding `prettierMonkeyC' setting."
          },
          "extraExcludes": {
            "type": "string",
            "markdownDescription": "[Semicolon separated list of excludeAnnotations to add or remove](https://github.com/markw65/monkeyc-optimizer/wiki/The-extraExcludes-Option)"
          },
          "ignoredExcludeAnnotations": {
            "type": "string",
            "description": "If present, overrides the corresponding `prettierMonkeyC' setting."
          },
          "ignoredAnnotations": {
            "type": "string",
            "description": "If present, overrides the corresponding `prettierMonkeyC' setting."
          },
          "ignoredSourcePaths": {
            "type": "string",
            "description": "If present, overrides the corresponding `prettierMonkeyC' setting."
          },
          "sizeBasedPRE": {
            "type": "boolean",
            "markdownDescription": "[Whether to enable the size based partial redundancy pass](https://github.com/markw65/monkeyc-optimizer/wiki/Type-and-Dataflow-analysis#size-based-pre)"
          },
          "trustDeclaredTypes": {
            "type": "boolean",
            "markdownDescription": "[Whether to rely on type declarations when optimizing](https://github.com/markw65/monkeyc-optimizer/wiki/Type-and-Dataflow-analysis#trust-declared-types)"
          },
          "propagateTypes": {
            "type": "boolean",
            "markdownDescription": "[Whether to propagate type information, or just perform it locally](https://github.com/markw65/monkeyc-optimizer/wiki/Type-and-Dataflow-analysis#propagate-types)"
          },
          "minimizeLocals": {
            "type": "boolean",
            "markdownDescription": "[Whether to enable the minimize locals pass](https://github.com/markw65/monkeyc-optimizer/wiki/Local-variable-elimination#minimize-locals)"
          },
          "minimizeModules": {
            "type": "boolean",
            "markdownDescription": "[Whether to enable the minimize modules pass](https://github.com/markw65/monkeyc-optimizer/wiki/Optimizing-module-imports#minimize-modules)"
          },
          "singleUseCopyProp": {
            "type": "boolean",
            "markdownDescription": "[Whether to enable the single use copy propagation pass](https://github.com/markw65/monkeyc-optimizer/wiki/Local-variable-elimination#single-use-copy-propagation)"
          },
          "iterateOptimizer": {
            "type": "boolean",
            "description": "Whether to keep running the optimizer pass until it makes no further changes (may be slow)"
          },
          "postBuildOptimizer": {
            "type": "boolean",
            "description": "Whether to enable the post build optimizer"
          },
          "removeArgc": {
            "type": "boolean",
            "markdownDescription": "[Whether to remove argc bytecodes](https://github.com/markw65/monkeyc-optimizer/wiki/Post-Build-Optimizer#remove-argc)"
          },
          "postBuildPRE": {
            "type": "boolean",
            "markdownDescription": "Post Build Size based PRE [similar to the source-to-source pass](https://github.com/markw65/monkeyc-optimizer/wiki/Type-and-Dataflow-analysis#size-based-pre)"
          },
          "enforceStatic": {
            "type": "string",
            "description": "Whether to perform lookups in static methods as if they were invoked statically",
            "enum": [
              "NO",
              "YES"
            ],
            "enumDescriptions": [
              "Assume static functions may be invoked non-statically",
              "Assume static functions will always be invoked statically"
            ],
            "default": "YES"
          },
          "compilerLookupRules": {
            "type": "string",
            "description": "Whether to perform lookups as compiler1, compiler2, or based on the currently selected sdk",
            "enum": [
              "COMPILER1",
              "COMPILER2",
              "DEFAULT"
            ],
            "enumDescriptions": [
              "Match compiler1's behavior when performing lookups",
              "Match compiler2's behavior when performing lookups",
              "Match the currently selected sdk's compiler"
            ],
            "default": "DEFAULT"
          },
          "checkCompilerLookupRules": {
            "type": "string",
            "description": "Whether to report differences in your code's behavior between compiler1 and compiler2",
            "enum": [
              "OFF",
              "INFO",
              "WARNING",
              "ERROR"
            ],
            "enumDescriptions": [
              "Disable checking",
              "Generate INFO level diagnostics",
              "Generate WARNING level diagnostics",
              "Generate ERROR level diagnostics"
            ],
            "default": "WARNING"
          },
          "useLocalOptimizer": {
            "type": "boolean",
            "description": "Whether to use a locally installed @markw65/monkeyc-optimizer for builds",
            "default": true,
            "scope": "resource"
          }
        }
      }
    ],
    "debuggers": [
      {
        "type": "omonkeyc",
        "label": "Optimized Monkey C",
        "languages": [
          "monkeyc",
          "jungle"
        ],
        "configurationAttributes": {
          "launch": {
            "properties": {
              "stopAtLaunch": {
                "type": "boolean",
                "description": "break immediately when the program launches.",
                "default": false
              },
              "device": {
                "type": "string",
                "description": "Device to run or 'choose' or '${command:GetTargetDevice}' to choose a new device each run."
              },
              "releaseBuild": {
                "type": "boolean",
                "description": "Run a release build."
              },
              "runTests": {
                "type": "boolean",
                "description": "run test cases.",
                "default": false
              },
              "jungleFiles": {
                "type": "string",
                "description": "If present, overrides the corresponding `monkeyC' setting."
              },
              "developerKeyPath": {
                "type": "string",
                "description": "If present, overrides the corresponding `monkeyC' setting."
              },
              "typeCheckLevel": {
                "type": "string",
                "description": "If present, overrides the corresponding `monkeyC' setting.",
                "enum": [
                  "Off",
                  "Gradual",
                  "Informative",
                  "Strict"
                ],
                "enumDescriptions": [
                  "Disable type checking",
                  "Type match failures are marked as errors, but ambiguity is ignored",
                  "Type match failures are marked as errors, and ambiguity is marked as a warning",
                  "Type match failures and ambiguity are marked as errors"
                ]
              },
              "optimizationLevel": {
                "type": "string",
                "description": "If present, overrides the corresponding `monkeyC' setting.",
                "enum": [
                  "None",
                  "Basic",
                  "Fast",
                  "Slow"
                ],
                "enumDescriptions": [
                  "No optimization",
                  "Basic optimizations for building in debug",
                  "Fast optimizations for building in release",
                  "Slow optimizations that need more time"
                ]
              },
              "checkInvalidSymbols": {
                "type": "string",
                "description": "Whether to check for invalid symbols, and how to report them",
                "enum": [
                  "OFF",
                  "INFO",
                  "WARNING",
                  "ERROR"
                ],
                "enumDescriptions": [
                  "Disable checking",
                  "Generate INFO level diagnostics",
                  "Generate WARNING level diagnostics",
                  "Generate ERROR level diagnostics"
                ],
                "default": "WARNING"
              },
              "checkTypes": {
                "type": "string",
                "description": "Whether to check for type related issues, and how to report them",
                "enum": [
                  "OFF",
                  "INFO",
                  "WARNING",
                  "ERROR"
                ],
                "enumDescriptions": [
                  "Disable checking",
                  "Generate INFO level diagnostics",
                  "Generate WARNING level diagnostics",
                  "Generate ERROR level diagnostics"
                ],
                "default": "WARNING"
              },
              "compilerOptions": {
                "type": "string",
                "description": "If present, overrides the corresponding `monkeyC' setting."
              },
              "compilerWarnings": {
                "type": "boolean",
                "description": "If present, overrides the corresponding `monkeyC' setting."
              },
              "outputPath": {
                "type": "string",
                "description": "If present, overrides the corresponding `prettierMonkeyC' setting."
              },
              "extraExcludes": {
                "type": "string",
                "markdownDescription": "[Semicolon separated list of excludeAnnotations to add or remove](https://github.com/markw65/monkeyc-optimizer/wiki/The-extraExcludes-Option)"
              },
              "ignoredExcludeAnnotations": {
                "type": "string",
                "description": "If present, overrides the corresponding `prettierMonkeyC' setting."
              },
              "ignoredAnnotations": {
                "type": "string",
                "description": "If present, overrides the corresponding `prettierMonkeyC' setting."
              },
              "ignoredSourcePaths": {
                "type": "string",
                "description": "If present, overrides the corresponding `prettierMonkeyC' setting."
              },
              "sizeBasedPRE": {
                "type": "boolean",
                "markdownDescription": "[Whether to enable the size based partial redundancy pass](https://github.com/markw65/monkeyc-optimizer/wiki/Type-and-Dataflow-analysis#size-based-pre)"
              },
              "trustDeclaredTypes": {
                "type": "boolean",
                "markdownDescription": "[Whether to rely on type declarations when optimizing](https://github.com/markw65/monkeyc-optimizer/wiki/Type-and-Dataflow-analysis#trust-declared-types)"
              },
              "propagateTypes": {
                "type": "boolean",
                "markdownDescription": "[Whether to propagate type information, or just perform it locally](https://github.com/markw65/monkeyc-optimizer/wiki/Type-and-Dataflow-analysis#propagate-types)"
              },
              "minimizeLocals": {
                "type": "boolean",
                "markdownDescription": "[Whether to enable the minimize locals pass](https://github.com/markw65/monkeyc-optimizer/wiki/Local-variable-elimination#minimize-locals)"
              },
              "minimizeModules": {
                "type": "boolean",
                "markdownDescription": "[Whether to enable the minimize modules pass](https://github.com/markw65/monkeyc-optimizer/wiki/Optimizing-module-imports#minimize-modules)"
              },
              "singleUseCopyProp": {
                "type": "boolean",
                "markdownDescription": "[Whether to enable the single use copy propagation pass](https://github.com/markw65/monkeyc-optimizer/wiki/Local-variable-elimination#single-use-copy-propagation)"
              },
              "iterateOptimizer": {
                "type": "boolean",
                "description": "Whether to keep running the optimizer pass until it makes no further changes (may be slow)"
              },
              "postBuildOptimizer": {
                "type": "boolean",
                "description": "Whether to enable the post build optimizer"
              },
              "removeArgc": {
                "type": "boolean",
                "markdownDescription": "[Whether to remove argc bytecodes](https://github.com/markw65/monkeyc-optimizer/wiki/Post-Build-Optimizer#remove-argc)"
              },
              "postBuildPRE": {
                "type": "boolean",
                "markdownDescription": "Post Build Size based PRE [similar to the source-to-source pass](https://github.com/markw65/monkeyc-optimizer/wiki/Type-and-Dataflow-analysis#size-based-pre)"
              },
              "enforceStatic": {
                "type": "string",
                "description": "Whether to perform lookups in static methods as if they were invoked statically",
                "enum": [
                  "NO",
                  "YES"
                ],
                "enumDescriptions": [
                  "Assume static functions may be invoked non-statically",
                  "Assume static functions will always be invoked statically"
                ],
                "default": "YES"
              },
              "compilerLookupRules": {
                "type": "string",
                "description": "Whether to perform lookups as compiler1, compiler2, or based on the currently selected sdk",
                "enum": [
                  "COMPILER1",
                  "COMPILER2",
                  "DEFAULT"
                ],
                "enumDescriptions": [
                  "Match compiler1's behavior when performing lookups",
                  "Match compiler2's behavior when performing lookups",
                  "Match the currently selected compiler's behavior"
                ],
                "default": "DEFAULT"
              },
              "checkCompilerLookupRules": {
                "type": "string",
                "description": "Whether to report differences in your code's behavior between compiler1 and compiler2",
                "enum": [
                  "OFF",
                  "INFO",
                  "WARNING",
                  "ERROR"
                ],
                "enumDescriptions": [
                  "Disable checking",
                  "Generate INFO level diagnostics",
                  "Generate WARNING level diagnostics",
                  "Generate ERROR level diagnostics"
                ],
                "default": "WARNING"
              },
              "useLocalOptimizer": {
                "type": "boolean",
                "description": "Whether to use a locally installed @markw65/monkeyc-optimizer for builds",
                "default": true,
                "scope": "resource"
              }
            }
          }
        },
        "initialConfigurations": [
          {
            "type": "omonkeyc",
            "request": "launch",
            "name": "Run Optimized",
            "stopAtLaunch": false,
            "device": "${command:GetTargetDevice}"
          }
        ],
        "configurationSnippets": [
          {
            "label": "Optimized Monkey C: Run Optimized",
            "body": {
              "type": "omonkeyc",
              "request": "launch",
              "name": "Run Optimized",
              "stopAtLaunch": false,
              "device": "^\"\\${command:GetTargetDevice}\""
            }
          }
        ],
        "variables": {
          "GetTargetDevice": "prettiermonkeyc.getTargetDevice"
        }
      }
    ]
  },
  "scripts": {
    "watch": "node esbuild.mjs --watch",
    "test": "node --inspect ./test/runTest.js",
    "build": "node esbuild.mjs",
    "build-release": "node esbuild.mjs --release",
    "mc-package": "npm install; npm install @markw65/monkeyc-optimizer; git commit -am \"Update to $(npm list @markw65/monkeyc-optimizer | sed -ne 's/^.*\\(@markw65\\/monkeyc\\)/\\1/p')\"",
    "mc-live": "test -z \"$(git status --untracked-files=no --porcelain || echo dirty)\" && npm install ../monkeyc-optimizer && npm install && git commit -am 'monkeyc-optimizer-live'",
    "prettier-package": "npm install; npm install @markw65/prettier-plugin-monkeyc; git commit -am \"Update to $(npm list @markw65/prettier-plugin-monkeyc | sed -ne 's/^.*\\(@markw65\\/prettier-plugin-monkeyc\\)/\\1/p')\"",
    "prettier-live": "test -z \"$(git status --untracked-files=no --porcelain || echo dirty)\" && npm install ../prettier-plugin-monkeyc && npm install && git commit -am 'prettier-plugin-monkeyc-live'",
    "vscode:uninstall": "node ./uninstall.js",
    "vscode:prepublish": "rm -rf build; npm run build-release",
    "lint": "eslint .",
    "pretest": "npm run lint"
  },
  "devDependencies": {
    "@types/glob": "^8.0.0",
    "@types/mocha": "^10.0.0",
    "@types/node": "16.x",
    "@types/prettier": "^2.6.1",
    "@types/vscode": "^1.65.0",
    "@typescript-eslint/eslint-plugin": "^5.45.0",
    "@typescript-eslint/parser": "^5.45.0",
    "@vscode/test-electron": "^2.3.9",
    "esbuild": "^0.20.0",
    "eslint": "^8.9.0",
    "fast-glob": "^3.2.12",
    "glob": "^8.0.3",
    "mocha": "^10.1.0",
    "node-html-parser": "^6.1.12",
    "typescript": "^5.0.4"
  },
  "extensionDependencies": [
    "esbenp.prettier-vscode",
    "garmin.monkey-c"
  ],
  "repository": {
    "type": "git",
    "url": "https://github.com/markw65/prettier-extension-monkeyc.git"
  },
  "homepage": "https://github.com/markw65/prettier-extension-monkeyc/blob/main/README.md",
  "__metadata": {
    "id": "7038293b-3427-42b7-b381-0c14519b1e02",
    "publisherDisplayName": "Mark W",
    "publisherId": "6cee78cc-f1ce-472e-b5e6-a69210aafbad",
    "isPreReleaseVersion": false
  }
}
