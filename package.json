{
  "type": "commonjs",
  "publisher": "markw65",
  "name": "prettier-extension-monkeyc",
  "displayName": "Prettier Monkey C",
  "description": "A Monkey C source transformation extension",
  "version": "2.0.27",
  "engines": {
    "vscode": "^1.65.0"
  },
  "dependencies": {
    "@markw65/monkeyc-optimizer": "^1.0.34",
    "@markw65/prettier-plugin-monkeyc": "^1.0.33"
  },
  "categories": [
    "Programming Languages",
    "Formatters"
  ],
  "activationEvents": [
    "onDebug",
    "onDebugDynamicConfigurations:omonkeyc",
    "onLanguage:monkeyc",
    "onCommand:workbench.action.tasks.runTask",
    "onCommand:prettiermonkeyc.generateOptimizedProject",
    "onCommand:prettiermonkeyc.buildOptimizedProject",
    "onCommand:prettiermonkeyc.runOptimizedProject",
    "onCommand:prettiermonkeyc.exportOptimizedProject",
    "onCommand:prettiermonkeyc.cleanOptimizedBuild",
    "onCommand:prettiermonkeyc.getTargetDevice",
    "onCommand:vscode.executeDocumentSymbolProvider"
  ],
  "main": "./build/extension.js",
  "contributes": {
    "commands": [
      {
        "title": "Generate Optimized Project",
        "command": "prettiermonkeyc.generateOptimizedProject",
        "category": "Prettier Monkey C"
      },
      {
        "title": "Build Optimized Project",
        "command": "prettiermonkeyc.buildOptimizedProject",
        "category": "Prettier Monkey C"
      },
      {
        "title": "Build and Run Optimized Project",
        "command": "prettiermonkeyc.runOptimizedProject",
        "category": "Prettier Monkey C"
      },
      {
        "title": "Export Optimized Project",
        "command": "prettiermonkeyc.exportOptimizedProject",
        "category": "Prettier Monkey C"
      },
      {
        "title": "Clean Optimized Build",
        "command": "prettiermonkeyc.cleanOptimizedBuild",
        "category": "Prettier Monkey C"
      }
    ],
    "configuration": [
      {
        "title": "Optimizer",
        "type": "object",
        "properties": {
          "prettierMonkeyC.outputPath": {
            "type": "string",
            "description": "Path to where the optimized project should be generated.",
            "default": "bin/optimized",
            "scope": "resource"
          },
          "prettierMonkeyC.ignoredExcludeAnnotations": {
            "type": "string",
            "description": "Semicolon separated list of excludeAnnotations to ignore, or `*' to ignore all",
            "default": "",
            "scope": "resource"
          },
          "prettierMonkeyC.ignoredAnnotations": {
            "type": "string",
            "description": "Semicolon separated list of annotations to ignore, or `*' to ignore all",
            "default": "",
            "scope": "resource"
          },
          "prettierMonkeyC.ignoredSourcePaths": {
            "type": "string",
            "description": "Regex of source paths to ignore.",
            "default": "",
            "scope": "resource"
          },
          "prettierMonkeyC.checkInvalidSymbols": {
            "type": "string",
            "description": "Whether to check for invalid symbols, and how to report them",
            "enum": [
              "OFF",
              "INFO",
              "WARNING",
              "ERROR"
            ],
            "enumDescriptions": [
              "Disable checking",
              "Generate INFO level diagnostics",
              "Generate WARNING level diagnostics",
              "Generate ERROR level diagnostics"
            ],
            "default": "WARNING",
            "scope": "resource"
          },
          "prettierMonkeyC.sizeBasedPRE": {
            "type": "boolean",
            "description": "Whether to enable the size based partial redundancy pass",
            "default": false,
            "scope": "resource"
          }
        }
      },
      {
        "title": "Prettier Monkey C",
        "type": "object",
        "properties": {
          "prettierMonkeyC.documentLinks": {
            "type": "boolean",
            "description": "Whether to add https links for Toybox entries in .mc files.",
            "default": true,
            "scope": "resource"
          }
        }
      }
    ],
    "taskDefinitions": [
      {
        "type": "omonkeyc",
        "required": [
          "device"
        ],
        "properties": {
          "device": {
            "type": "string",
            "description": "The device to build for. The special value `export' will do an iq build into bin/export, and the value `choose' will let you pick the device from a list"
          },
          "simulatorBuild": {
            "type": "boolean",
            "description": "Is this build for the simulator."
          },
          "releaseBuild": {
            "type": "boolean",
            "description": "Is this a release build."
          },
          "testBuild": {
            "type": "boolean",
            "description": "Is this a test build."
          },
          "jungleFiles": {
            "type": "string",
            "description": "If present, overrides the corresponding `monkeyC' setting."
          },
          "developerKeyPath": {
            "type": "string",
            "description": "If present, overrides the corresponding `monkeyC' setting."
          },
          "typeCheckLevel": {
            "type": "string",
            "description": "If present, overrides the corresponding `monkeyC' setting.",
            "enum": [
              "Off",
              "Gradual",
              "Informative",
              "Strict"
            ],
            "enumDescriptions": [
              "Disable type checking",
              "Type match failures are marked as errors, but ambiguity is ignored",
              "Type match failures are marked as errors, and ambiguity is marked as a warning",
              "Type match failures and ambiguity are marked as errors"
            ]
          },
          "checkInvalidSymbols": {
            "type": "string",
            "description": "Whether to check for invalid symbols, and how to report them",
            "enum": [
              "OFF",
              "INFO",
              "WARNING",
              "ERROR"
            ],
            "enumDescriptions": [
              "Disable checking",
              "Generate INFO level diagnostics",
              "Generate WARNING level diagnostics",
              "Generate ERROR level diagnostics"
            ],
            "default": "WARNING"
          },
          "compilerOptions": {
            "type": "string",
            "description": "If present, overrides the corresponding `monkeyC' setting."
          },
          "compilerWarnings": {
            "type": "boolean",
            "description": "If present, overrides the corresponding `monkeyC' setting."
          },
          "outputPath": {
            "type": "string",
            "description": "If present, overrides the corresponding `prettierMonkeyC' setting."
          },
          "ignoredExcludeAnnotations": {
            "type": "string",
            "description": "If present, overrides the corresponding `prettierMonkeyC' setting."
          },
          "ignoredAnnotations": {
            "type": "string",
            "description": "If present, overrides the corresponding `prettierMonkeyC' setting."
          },
          "ignoredSourcePaths": {
            "type": "string",
            "description": "If present, overrides the corresponding `prettierMonkeyC' setting."
          },
          "sizeBasedPRE": {
            "type": "boolean",
            "description": "If present, overrides the corresponding `prettierMonkeyC' setting.",
            "default": false,
            "scope": "resource"
          }
        }
      }
    ],
    "debuggers": [
      {
        "type": "omonkeyc",
        "label": "Optimized Monkey C",
        "languages": [
          "monkeyc",
          "jungle"
        ],
        "configurationAttributes": {
          "launch": {
            "properties": {
              "stopAtLaunch": {
                "type": "boolean",
                "description": "break immediately when the program launches.",
                "default": false
              },
              "device": {
                "type": "string",
                "description": "Device to run or 'choose' or '${command:GetTargetDevice}' to choose a new device each run."
              },
              "releaseBuild": {
                "type": "boolean",
                "description": "Run a release build."
              },
              "runTests": {
                "type": "boolean",
                "description": "run test cases.",
                "default": false
              },
              "jungleFiles": {
                "type": "string",
                "description": "If present, overrides the corresponding `monkeyC' setting."
              },
              "developerKeyPath": {
                "type": "string",
                "description": "If present, overrides the corresponding `monkeyC' setting."
              },
              "typeCheckLevel": {
                "type": "string",
                "description": "If present, overrides the corresponding `monkeyC' setting.",
                "enum": [
                  "Off",
                  "Gradual",
                  "Informative",
                  "Strict"
                ],
                "enumDescriptions": [
                  "Disable type checking",
                  "Type match failures are marked as errors, but ambiguity is ignored",
                  "Type match failures are marked as errors, and ambiguity is marked as a warning",
                  "Type match failures and ambiguity are marked as errors"
                ]
              },
              "checkInvalidSymbols": {
                "type": "string",
                "description": "Whether to check for invalid symbols, and how to report them",
                "enum": [
                  "OFF",
                  "INFO",
                  "WARNING",
                  "ERROR"
                ],
                "enumDescriptions": [
                  "Disable checking",
                  "Generate INFO level diagnostics",
                  "Generate WARNING level diagnostics",
                  "Generate ERROR level diagnostics"
                ],
                "default": "WARNING"
              },
              "compilerOptions": {
                "type": "string",
                "description": "If present, overrides the corresponding `monkeyC' setting."
              },
              "compilerWarnings": {
                "type": "boolean",
                "description": "If present, overrides the corresponding `monkeyC' setting."
              },
              "outputPath": {
                "type": "string",
                "description": "If present, overrides the corresponding `prettierMonkeyC' setting."
              },
              "ignoredExcludeAnnotations": {
                "type": "string",
                "description": "If present, overrides the corresponding `prettierMonkeyC' setting."
              },
              "ignoredAnnotations": {
                "type": "string",
                "description": "If present, overrides the corresponding `prettierMonkeyC' setting."
              },
              "ignoredSourcePaths": {
                "type": "string",
                "description": "If present, overrides the corresponding `prettierMonkeyC' setting."
              },
              "sizeBasedPRE": {
                "type": "boolean",
                "description": "If present, overrides the corresponding `prettierMonkeyC' setting."
              }
            }
          }
        },
        "initialConfigurations": [
          {
            "type": "omonkeyc",
            "request": "launch",
            "name": "Run Optimized",
            "stopAtLaunch": false,
            "device": "${command:GetTargetDevice}"
          }
        ],
        "configurationSnippets": [
          {
            "label": "Optimized Monkey C: Run Optimized",
            "body": {
              "type": "omonkeyc",
              "request": "launch",
              "name": "Run Optimized",
              "stopAtLaunch": false,
              "device": "^\"\\${command:GetTargetDevice}\""
            }
          }
        ],
        "variables": {
          "GetTargetDevice": "prettiermonkeyc.getTargetDevice"
        }
      }
    ]
  },
  "scripts": {
    "lint": "eslint .",
    "pretest": "npm run lint",
    "test": "node --inspect ./test/runTest.js",
    "vscode:uninstall": "node ./uninstall.js",
    "vscode:prepublish": "rm -rf build; npm run build",
    "build": "npx tsc",
    "watch": "npx tsc --watch"
  },
  "devDependencies": {
    "@types/glob": "^7.2.0",
    "@types/mocha": "^9.1.0",
    "@types/node": "16.x",
    "@types/prettier": "^2.6.1",
    "@types/vscode": "^1.65.0",
    "@vscode/test-electron": "^2.1.2",
    "eslint": "^8.9.0",
    "glob": "^7.2.0",
    "mocha": "^9.2.1",
    "typescript": "^4.7.2"
  },
  "extensionDependencies": [
    "esbenp.prettier-vscode",
    "garmin.monkey-c"
  ],
  "repository": {
    "type": "git",
    "url": "https://github.com/markw65/prettier-extension-monkeyc.git"
  },
  "homepage": "https://github.com/markw65/prettier-extension-monkeyc/blob/main/README.md",
  "__metadata": {
    "id": "7038293b-3427-42b7-b381-0c14519b1e02",
    "publisherDisplayName": "Mark W",
    "publisherId": "6cee78cc-f1ce-472e-b5e6-a69210aafbad",
    "isPreReleaseVersion": false
  }
}
